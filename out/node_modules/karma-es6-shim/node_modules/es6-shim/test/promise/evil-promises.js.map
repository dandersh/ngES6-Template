{"version":3,"sources":["../../../../../../../node_modules/karma-es6-shim/node_modules/es6-shim/test/promise/evil-promises.js"],"names":[],"mappings":";;AAAA;;AAEA,SAAS,sDAAT,EAAiE,YAAY;AAC3E;;AAEA,UAAQ,qDAAR,EAA+D,UAAU,IAAV,EAAgB;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAI,cAAc,SAAd,WAAc,CAAU,QAAV,EAAoB;AACpC,UAAI,OAAO,IAAI,OAAJ,CAAY,QAAZ,CAAX;AACA,aAAO,cAAP,CAAsB,IAAtB,EAA4B,YAAY,SAAxC;AACA,aAAO,IAAP;AACD,KAJD;AAKA,QAAI,CAAC,OAAO,cAAZ,EAA4B;AAAE,aAAO,MAAP;AAAgB,KAAC;AAC/C,WAAO,cAAP,CAAsB,WAAtB,EAAmC,OAAnC;AACA,gBAAY,SAAZ,GAAwB,OAAO,MAAP,CAAc,QAAQ,SAAtB,EAAiC;AACvD,mBAAa,EAAE,OAAO,WAAT;AAD0C,KAAjC,CAAxB;;AAIA,QAAI,cAAc,YAAY,OAAZ,EAAlB;AACA,gBAAY,IAAZ,GAAmB,UAAU,CAAV,EAAa;AAC9B,QAAE,CAAF;AACA,QAAE,CAAF;AACD,KAHD;;AAKA,QAAI,gBAAgB,KAApB;AACA,QAAI,OAAJ,CAAY,UAAU,CAAV,EAAa;AAAE,QAAE,WAAF;AAAiB,KAA5C,EAA8C,IAA9C,CAAmD,UAAU,KAAV,EAAiB;AAClE,aAAO,WAAP,CAAmB,aAAnB,EAAkC,KAAlC;AACA,sBAAgB,IAAhB;AACA,aAAO,WAAP,CAAmB,KAAnB,EAA0B,CAA1B;AACD,KAJD,EAIG,IAJH,CAIQ,IAJR,EAIc,IAJd;AAKD,GA/BD;AAgCD,CAnCD","file":"evil-promises.js","sourcesContent":["/* global describe, specify, assert, Promise */\n\ndescribe('Evil promises should not be able to break invariants', function () {\n  'use strict';\n\n  specify('resolving to a promise that calls onFulfilled twice', function (done) {\n    // note that we have to create a trivial subclass, as otherwise the\n    // Promise.resolve(evilPromise) is just the identity function.\n    // (And in fact, most native Promise implementations use a private\n    // [[PromiseConstructor]] field in `Promise.resolve` which can't be\n    // easily patched in an ES5 engine, so instead of\n    // `Promise.resolve(evilPromise)` we'll use\n    // `new Promise(function(r){r(evilPromise);})` below.)\n    var EvilPromise = function (executor) {\n      var self = new Promise(executor);\n      Object.setPrototypeOf(self, EvilPromise.prototype);\n      return self;\n    };\n    if (!Object.setPrototypeOf) { return done(); } // skip test if on IE < 11\n    Object.setPrototypeOf(EvilPromise, Promise);\n    EvilPromise.prototype = Object.create(Promise.prototype, {\n      constructor: { value: EvilPromise }\n    });\n\n    var evilPromise = EvilPromise.resolve();\n    evilPromise.then = function (f) {\n      f(1);\n      f(2);\n    };\n\n    var calledAlready = false;\n    new Promise(function (r) { r(evilPromise); }).then(function (value) {\n      assert.strictEqual(calledAlready, false);\n      calledAlready = true;\n      assert.strictEqual(value, 1);\n    }).then(done, done);\n  });\n});\n"]}