{"version":3,"sources":["../../../../../../../node_modules/karma-es6-shim/node_modules/es5-shim/tests/spec/s-regexp.js"],"names":[],"mappings":";;AAAA;;AAEA,SAAS,QAAT,EAAmB,YAAY;AAC3B;;AAEA,aAAS,aAAT,EAAwB,YAAY;AAChC,iBAAS,UAAT,EAAqB,YAAY;AAC7B,eAAG,kDAAH,EAAuD,YAAY;AAC/D,uBAAO,OAAO,SAAP,CAAP,EAA0B,IAA1B,CAA+B,WAA/B;AACA,uBAAO,OAAO,UAAP,CAAP,EAA2B,IAA3B,CAAgC,YAAhC;AACA,uBAAO,OAAO,WAAP,CAAP,EAA4B,IAA5B,CAAiC,aAAjC;AACA,uBAAO,OAAO,WAAP,CAAP,EAA4B,IAA5B,CAAiC,aAAjC;AACA,uBAAO,OAAO,YAAP,CAAP,EAA6B,IAA7B,CAAkC,cAAlC;AACH,aAND;AAOH,SARD;;AAUA,iBAAS,SAAT,EAAoB,YAAY;AAC5B,eAAG,kDAAH,EAAuD,YAAY;AAC/D,uBAAO,OAAO,IAAI,MAAJ,CAAW,SAAX,CAAP,CAAP,EAAsC,IAAtC,CAA2C,WAA3C;AACA,uBAAO,OAAO,IAAI,MAAJ,CAAW,SAAX,EAAsB,GAAtB,CAAP,CAAP,EAA2C,IAA3C,CAAgD,YAAhD;AACA,uBAAO,OAAO,IAAI,MAAJ,CAAW,SAAX,EAAsB,IAAtB,CAAP,CAAP,EAA4C,IAA5C,CAAiD,aAAjD;AACA,uBAAO,OAAO,IAAI,MAAJ,CAAW,SAAX,EAAsB,IAAtB,CAAP,CAAP,EAA4C,IAA5C,CAAiD,aAAjD;AACA,uBAAO,OAAO,IAAI,MAAJ,CAAW,SAAX,EAAsB,KAAtB,CAAP,CAAP,EAA6C,IAA7C,CAAkD,cAAlD;AACH,aAND;AAOH,SARD;AASH,KApBD;AAqBH,CAxBD","file":"s-regexp.js","sourcesContent":["/* global describe, it, expect */\n\ndescribe('RegExp', function () {\n    'use strict';\n\n    describe('#toString()', function () {\n        describe('literals', function () {\n            it('should return correct flags and in correct order', function () {\n                expect(String(/pattern/)).toBe('/pattern/');\n                expect(String(/pattern/i)).toBe('/pattern/i');\n                expect(String(/pattern/mi)).toBe('/pattern/im');\n                expect(String(/pattern/im)).toBe('/pattern/im');\n                expect(String(/pattern/mgi)).toBe('/pattern/gim');\n            });\n        });\n\n        describe('objects', function () {\n            it('should return correct flags and in correct order', function () {\n                expect(String(new RegExp('pattern'))).toBe('/pattern/');\n                expect(String(new RegExp('pattern', 'i'))).toBe('/pattern/i');\n                expect(String(new RegExp('pattern', 'mi'))).toBe('/pattern/im');\n                expect(String(new RegExp('pattern', 'im'))).toBe('/pattern/im');\n                expect(String(new RegExp('pattern', 'mgi'))).toBe('/pattern/gim');\n            });\n        });\n    });\n});\n"]}