{"version":3,"sources":["../../../../../../../../../../../../../../../node_modules/watchify/node_modules/anymatch/node_modules/micromatch/node_modules/braces/node_modules/expand-range/node_modules/fill-range/node_modules/randomatic/index.js"],"names":[],"mappings":"AAAA;;;;;;;;AAQA;;AAEA,IAAI,WAAW,QAAQ,WAAR,CAAf;AACA,IAAI,SAAS,QAAQ,SAAR,CAAb;;AAEA;;;;AAIA,OAAO,OAAP,GAAiB,UAAjB;;AAEA;;;;AAIA,IAAI,OAAO;AACT,SAAO,4BADE;AAET,SAAO,4BAFE;AAGT,UAAQ,YAHC;AAIT,WAAS;AAJA,CAAX;;AAOA,KAAK,GAAL,GAAW,KAAK,KAAL,GAAa,KAAK,KAAlB,GAA0B,KAAK,MAA1C;;AAEA;;;;;;;;;;;AAWA,SAAS,UAAT,CAAoB,OAApB,EAA6B,MAA7B,EAAqC,OAArC,EAA8C;AAC5C,MAAI,OAAO,OAAP,KAAmB,WAAvB,EAAoC;AAClC,UAAM,IAAI,KAAJ,CAAU,wCAAV,CAAN;AACD;;AAED,MAAI,SAAS,KAAb;AACA,MAAI,UAAU,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,QAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,eAAS,QAAQ,MAAjB;AAED,KAHD,MAGO,IAAI,SAAS,OAAT,CAAJ,EAAuB;AAC5B,gBAAU,EAAV,CAAc,SAAS,OAAT,CAAkB,UAAU,GAAV;AACjC;AACF;;AAED,MAAI,OAAO,MAAP,MAAmB,QAAnB,IAA+B,OAAO,cAAP,CAAsB,OAAtB,CAAnC,EAAmE;AACjE,cAAU,MAAV;AACA,cAAU,QAAQ,KAAlB;AACA,aAAS,QAAQ,MAAjB;AACA,aAAS,IAAT;AACD;;AAED,MAAI,OAAO,WAAW,EAAtB;AACA,MAAI,OAAO,EAAX;AACA,MAAI,MAAM,EAAV;;AAEA;AACA,MAAI,QAAQ,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAA9B,EAAiC,QAAQ,KAAK,KAAb;AACjC,MAAI,QAAQ,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAA9B,EAAiC,QAAQ,KAAK,KAAb;AACjC,MAAI,QAAQ,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAA9B,EAAiC,QAAQ,KAAK,KAAb;AACjC,MAAI,QAAQ,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAA9B,EAAiC,QAAQ,KAAK,MAAb;AACjC,MAAI,QAAQ,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAA9B,EAAiC,QAAQ,KAAK,OAAb;AACjC,MAAI,QAAQ,OAAR,CAAgB,GAAhB,MAAyB,CAAC,CAA9B,EAAiC,QAAQ,KAAK,GAAb;AACjC,MAAI,MAAJ,EAAY,QAAQ,OAAR;;AAEZ,SAAO,QAAP,EAAiB;AACf,WAAO,KAAK,MAAL,CAAY,SAAS,KAAK,MAAL,KAAgB,KAAK,MAA9B,EAAsC,EAAtC,CAAZ,CAAP;AACD;AACD,SAAO,GAAP;AACD","file":"index.js","sourcesContent":["/*!\n * randomatic <https://github.com/jonschlinkert/randomatic>\n *\n * This was originally inspired by <http://stackoverflow.com/a/10727155/1267639>\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License (MIT)\n */\n\n'use strict';\n\nvar isNumber = require('is-number');\nvar typeOf = require('kind-of');\n\n/**\n * Expose `randomatic`\n */\n\nmodule.exports = randomatic;\n\n/**\n * Available mask characters\n */\n\nvar type = {\n  lower: 'abcdefghijklmnopqrstuvwxyz',\n  upper: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n  number: '0123456789',\n  special: '~!@#$%^&()_+-={}[];\\',.'\n};\n\ntype.all = type.lower + type.upper + type.number;\n\n/**\n * Generate random character sequences of a specified `length`,\n * based on the given `pattern`.\n *\n * @param {String} `pattern` The pattern to use for generating the random string.\n * @param {String} `length` The length of the string to generate.\n * @param {String} `options`\n * @return {String}\n * @api public\n */\n\nfunction randomatic(pattern, length, options) {\n  if (typeof pattern === 'undefined') {\n    throw new Error('randomatic expects a string or number.');\n  }\n\n  var custom = false;\n  if (arguments.length === 1) {\n    if (typeof pattern === 'string') {\n      length = pattern.length;\n\n    } else if (isNumber(pattern)) {\n      options = {}; length = pattern; pattern = '*';\n    }\n  }\n\n  if (typeOf(length) === 'object' && length.hasOwnProperty('chars')) {\n    options = length;\n    pattern = options.chars;\n    length = pattern.length;\n    custom = true;\n  }\n\n  var opts = options || {};\n  var mask = '';\n  var res = '';\n\n  // Characters to be used\n  if (pattern.indexOf('?') !== -1) mask += opts.chars;\n  if (pattern.indexOf('a') !== -1) mask += type.lower;\n  if (pattern.indexOf('A') !== -1) mask += type.upper;\n  if (pattern.indexOf('0') !== -1) mask += type.number;\n  if (pattern.indexOf('!') !== -1) mask += type.special;\n  if (pattern.indexOf('*') !== -1) mask += type.all;\n  if (custom) mask += pattern;\n\n  while (length--) {\n    res += mask.charAt(parseInt(Math.random() * mask.length, 10));\n  }\n  return res;\n};\n"]}