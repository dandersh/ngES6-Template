{"version":3,"sources":["../../../../../../../../node_modules/watchify/node_modules/anymatch/node_modules/micromatch/lib/expand.js"],"names":[],"mappings":"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","file":"expand.js","sourcesContent":["/*!\n * micromatch <https://github.com/jonschlinkert/micromatch>\n *\n * Copyright (c) 2014-2015, Jon Schlinkert.\n * Licensed under the MIT License.\n */\n\n'use strict';\n\nvar utils = require('./utils');\nvar Glob = require('./glob');\n\n/**\n * Expose `expand`\n */\n\nmodule.exports = expand;\n\n/**\n * Expand a glob pattern to resolve braces and\n * similar patterns before converting to regex.\n *\n * @param  {String|Array} `pattern`\n * @param  {Array} `files`\n * @param  {Options} `opts`\n * @return {Array}\n */\n\nfunction expand(pattern, options) {\n  if (typeof pattern !== 'string') {\n    throw new TypeError('micromatch.expand(): argument should be a string.');\n  }\n\n  var glob = new Glob(pattern, options || {});\n  var opts = glob.options;\n\n  if (!utils.isGlob(pattern)) {\n    glob.pattern = glob.pattern.replace(/([\\/.])/g, '\\\\$1');\n    return glob;\n  }\n\n  glob.pattern = glob.pattern.replace(/(\\+)(?!\\()/g, '\\\\$1');\n  glob.pattern = glob.pattern.split('$').join('\\\\$');\n\n  if (typeof opts.braces !== 'boolean' && typeof opts.nobraces !== 'boolean') {\n    opts.braces = true;\n  }\n\n  if (glob.pattern === '.*') {\n    return {\n      pattern: '\\\\.' + star,\n      tokens: tok,\n      options: opts\n    };\n  }\n\n  if (glob.pattern === '*') {\n    return {\n      pattern: oneStar(opts.dot),\n      tokens: tok,\n      options: opts\n    };\n  }\n\n  // parse the glob pattern into tokens\n  glob.parse();\n  var tok = glob.tokens;\n  tok.is.negated = opts.negated;\n\n  // dotfile handling\n  if ((opts.dotfiles === true || tok.is.dotfile) && opts.dot !== false) {\n    opts.dotfiles = true;\n    opts.dot = true;\n  }\n\n  if ((opts.dotdirs === true || tok.is.dotdir) && opts.dot !== false) {\n    opts.dotdirs = true;\n    opts.dot = true;\n  }\n\n  // check for braces with a dotfile pattern\n  if (/[{,]\\./.test(glob.pattern)) {\n    opts.makeRe = false;\n    opts.dot = true;\n  }\n\n  if (opts.nonegate !== true) {\n    opts.negated = glob.negated;\n  }\n\n  // if the leading character is a dot or a slash, escape it\n  if (glob.pattern.charAt(0) === '.' && glob.pattern.charAt(1) !== '/') {\n    glob.pattern = '\\\\' + glob.pattern;\n  }\n\n  /**\n   * Extended globs\n   */\n\n  // expand braces, e.g `{1..5}`\n  glob.track('before braces');\n  if (tok.is.braces) {\n    glob.braces();\n  }\n  glob.track('after braces');\n\n  // expand extglobs, e.g `foo/!(a|b)`\n  glob.track('before extglob');\n  if (tok.is.extglob) {\n    glob.extglob();\n  }\n  glob.track('after extglob');\n\n  // expand brackets, e.g `[[:alpha:]]`\n  glob.track('before brackets');\n  if (tok.is.brackets) {\n    glob.brackets();\n  }\n  glob.track('after brackets');\n\n  // special patterns\n  glob._replace('[!', '[^');\n  glob._replace('(?', '(%~');\n  glob._replace(/\\[\\]/, '\\\\[\\\\]');\n  glob._replace('/[', '/' + (opts.dot ? dotfiles : nodot) + '[', true);\n  glob._replace('/?', '/' + (opts.dot ? dotfiles : nodot) + '[^/]', true);\n  glob._replace('/.', '/(?=.)\\\\.', true);\n\n  // windows drives\n  glob._replace(/^(\\w):([\\\\\\/]+?)/gi, '(?=.)$1:$2', true);\n\n  // negate slashes in exclusion ranges\n  if (glob.pattern.indexOf('[^') !== -1) {\n    glob.pattern = negateSlash(glob.pattern);\n  }\n\n  if (opts.globstar !== false && glob.pattern === '**') {\n    glob.pattern = globstar(opts.dot);\n\n  } else {\n    glob.pattern = balance(glob.pattern, '[', ']');\n    glob.escape(glob.pattern);\n\n    // if the pattern has `**`\n    if (tok.is.globstar) {\n      glob.pattern = collapse(glob.pattern, '/**');\n      glob.pattern = collapse(glob.pattern, '**/');\n      glob._replace('/**/', '(?:/' + globstar(opts.dot) + '/|/)', true);\n      glob._replace(/\\*{2,}/g, '**');\n\n      // 'foo/*'\n      glob._replace(/(\\w+)\\*(?!\\/)/g, '$1[^/]*?', true);\n      glob._replace(/\\*\\*\\/\\*(\\w)/g, globstar(opts.dot) + '\\\\/' + (opts.dot ? dotfiles : nodot) + '[^/]*?$1', true);\n\n      if (opts.dot !== true) {\n        glob._replace(/\\*\\*\\/(.)/g, '(?:**\\\\/|)$1');\n      }\n\n      // 'foo/**' or '{**,*}', but not 'foo**'\n      if (tok.path.dirname !== '' || /,\\*\\*|\\*\\*,/.test(glob.orig)) {\n        glob._replace('**', globstar(opts.dot), true);\n      }\n    }\n\n    // ends with /*\n    glob._replace(/\\/\\*$/, '\\\\/' + oneStar(opts.dot), true);\n    // ends with *, no slashes\n    glob._replace(/(?!\\/)\\*$/, star, true);\n    // has 'n*.' (partial wildcard w/ file extension)\n    glob._replace(/([^\\/]+)\\*/, '$1' + oneStar(true), true);\n    // has '*'\n    glob._replace('*', oneStar(opts.dot), true);\n    glob._replace('?.', '?\\\\.', true);\n    glob._replace('?:', '?:', true);\n\n    glob._replace(/\\?+/g, function(match) {\n      var len = match.length;\n      if (len === 1) {\n        return qmark;\n      }\n      return qmark + '{' + len + '}';\n    });\n\n    // escape '.abc' => '\\\\.abc'\n    glob._replace(/\\.([*\\w]+)/g, '\\\\.$1');\n    // fix '[^\\\\\\\\/]'\n    glob._replace(/\\[\\^[\\\\\\/]+\\]/g, qmark);\n    // '///' => '\\/'\n    glob._replace(/\\/+/g, '\\\\/');\n    // '\\\\\\\\\\\\' => '\\\\'\n    glob._replace(/\\\\{2,}/g, '\\\\');\n  }\n\n  // unescape previously escaped patterns\n  glob.unescape(glob.pattern);\n  glob._replace('__UNESC_STAR__', '*');\n\n  // escape dots that follow qmarks\n  glob._replace('?.', '?\\\\.');\n\n  // remove unnecessary slashes in character classes\n  glob._replace('[^\\\\/]', qmark);\n\n  if (glob.pattern.length > 1) {\n    if (/^[\\[?*]/.test(glob.pattern)) {\n      // only prepend the string if we don't want to match dotfiles\n      glob.pattern = (opts.dot ? dotfiles : nodot) + glob.pattern;\n    }\n  }\n\n  return glob;\n}\n\n/**\n * Collapse repeated character sequences.\n *\n * ```js\n * collapse('a/../../../b', '../');\n * //=> 'a/../b'\n * ```\n *\n * @param  {String} `str`\n * @param  {String} `ch` Character sequence to collapse\n * @return {String}\n */\n\nfunction collapse(str, ch) {\n  var res = str.split(ch);\n  var isFirst = res[0] === '';\n  var isLast = res[res.length - 1] === '';\n  res = res.filter(Boolean);\n  if (isFirst) res.unshift('');\n  if (isLast) res.push('');\n  return res.join(ch);\n}\n\n/**\n * Negate slashes in exclusion ranges, per glob spec:\n *\n * ```js\n * negateSlash('[^foo]');\n * //=> '[^\\\\/foo]'\n * ```\n *\n * @param  {String} `str` glob pattern\n * @return {String}\n */\n\nfunction negateSlash(str) {\n  return str.replace(/\\[\\^([^\\]]*?)\\]/g, function(match, inner) {\n    if (inner.indexOf('/') === -1) {\n      inner = '\\\\/' + inner;\n    }\n    return '[^' + inner + ']';\n  });\n}\n\n/**\n * Escape imbalanced braces/bracket. This is a very\n * basic, naive implementation that only does enough\n * to serve the purpose.\n */\n\nfunction balance(str, a, b) {\n  var aarr = str.split(a);\n  var alen = aarr.join('').length;\n  var blen = str.split(b).join('').length;\n\n  if (alen !== blen) {\n    str = aarr.join('\\\\' + a);\n    return str.split(b).join('\\\\' + b);\n  }\n  return str;\n}\n\n/**\n * Special patterns to be converted to regex.\n * Heuristics are used to simplify patterns\n * and speed up processing.\n */\n\n/* eslint no-multi-spaces: 0 */\nvar qmark       = '[^/]';\nvar star        = qmark + '*?';\nvar nodot       = '(?!\\\\.)(?=.)';\nvar dotfileGlob = '(?:\\\\/|^)\\\\.{1,2}($|\\\\/)';\nvar dotfiles    = '(?!' + dotfileGlob + ')(?=.)';\nvar twoStarDot  = '(?:(?!' + dotfileGlob + ').)*?';\n\n/**\n * Create a regex for `*`.\n *\n * If `dot` is true, or the pattern does not begin with\n * a leading star, then return the simpler regex.\n */\n\nfunction oneStar(dotfile) {\n  return dotfile ? '(?!' + dotfileGlob + ')(?=.)' + star : (nodot + star);\n}\n\nfunction globstar(dotfile) {\n  if (dotfile) { return twoStarDot; }\n  return '(?:(?!(?:\\\\/|^)\\\\.).)*?';\n}\n"]}