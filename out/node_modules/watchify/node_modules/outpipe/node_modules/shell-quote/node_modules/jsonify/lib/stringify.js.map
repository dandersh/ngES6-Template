{"version":3,"sources":["../../../../../../../../../../node_modules/watchify/node_modules/outpipe/node_modules/shell-quote/node_modules/jsonify/lib/stringify.js"],"names":[],"mappings":"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","file":"stringify.js","sourcesContent":["var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    gap,\n    indent,\n    meta = {    // table of character substitutions\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\f': '\\\\f',\n        '\\r': '\\\\r',\n        '\"' : '\\\\\"',\n        '\\\\': '\\\\\\\\'\n    },\n    rep;\n\nfunction quote(string) {\n    // If the string contains no control characters, no quote characters, and no\n    // backslash characters, then we can safely slap some quotes around it.\n    // Otherwise we must also replace the offending characters with safe escape\n    // sequences.\n    \n    escapable.lastIndex = 0;\n    return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n        var c = meta[a];\n        return typeof c === 'string' ? c :\n            '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n    }) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n    // Produce a string from holder[key].\n    var i,          // The loop counter.\n        k,          // The member key.\n        v,          // The member value.\n        length,\n        mind = gap,\n        partial,\n        value = holder[key];\n    \n    // If the value has a toJSON method, call it to obtain a replacement value.\n    if (value && typeof value === 'object' &&\n            typeof value.toJSON === 'function') {\n        value = value.toJSON(key);\n    }\n    \n    // If we were called with a replacer function, then call the replacer to\n    // obtain a replacement value.\n    if (typeof rep === 'function') {\n        value = rep.call(holder, key, value);\n    }\n    \n    // What happens next depends on the value's type.\n    switch (typeof value) {\n        case 'string':\n            return quote(value);\n        \n        case 'number':\n            // JSON numbers must be finite. Encode non-finite numbers as null.\n            return isFinite(value) ? String(value) : 'null';\n        \n        case 'boolean':\n        case 'null':\n            // If the value is a boolean or null, convert it to a string. Note:\n            // typeof null does not produce 'null'. The case is included here in\n            // the remote chance that this gets fixed someday.\n            return String(value);\n            \n        case 'object':\n            if (!value) return 'null';\n            gap += indent;\n            partial = [];\n            \n            // Array.isArray\n            if (Object.prototype.toString.apply(value) === '[object Array]') {\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || 'null';\n                }\n                \n                // Join all of the elements together, separated with commas, and\n                // wrap them in brackets.\n                v = partial.length === 0 ? '[]' : gap ?\n                    '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                    '[' + partial.join(',') + ']';\n                gap = mind;\n                return v;\n            }\n            \n            // If the replacer is an array, use it to select the members to be\n            // stringified.\n            if (rep && typeof rep === 'object') {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    k = rep[i];\n                    if (typeof k === 'string') {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            else {\n                // Otherwise, iterate through all of the keys in the object.\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            \n        // Join all of the member texts together, separated with commas,\n        // and wrap them in braces.\n\n        v = partial.length === 0 ? '{}' : gap ?\n            '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n            '{' + partial.join(',') + '}';\n        gap = mind;\n        return v;\n    }\n}\n\nmodule.exports = function (value, replacer, space) {\n    var i;\n    gap = '';\n    indent = '';\n    \n    // If the space parameter is a number, make an indent string containing that\n    // many spaces.\n    if (typeof space === 'number') {\n        for (i = 0; i < space; i += 1) {\n            indent += ' ';\n        }\n    }\n    // If the space parameter is a string, it will be used as the indent string.\n    else if (typeof space === 'string') {\n        indent = space;\n    }\n\n    // If there is a replacer, it must be a function or an array.\n    // Otherwise, throw an error.\n    rep = replacer;\n    if (replacer && typeof replacer !== 'function'\n    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {\n        throw new Error('JSON.stringify');\n    }\n    \n    // Make a fake root object containing our value under the key of ''.\n    // Return the result of stringifying the value.\n    return str('', {'': value});\n};\n"]}